<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PlayGen.SUGAR.Client</name>
    </assembly>
    <members>
        <member name="T:PlayGen.SUGAR.Client.AccountClient">
            <summary>
            Controller that facilitates Account specific operations.
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AccountClient.Login(PlayGen.SUGAR.Contracts.Shared.AccountRequest)">
            <summary>
            Logs in an account into the system based on the name and password combination.
            Returns a JsonWebToken used for authorization in any further calls to the API.
            </summary>
            <param name="account"><see cref="T:PlayGen.SUGAR.Contracts.Shared.AccountRequest"/> object that contains the account details provided.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.AccountResponse"/> containing the Account details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AccountClient.Login(System.Int32,PlayGen.SUGAR.Contracts.Shared.AccountRequest)">
            <summary>
            Logs in an account into a game based on the name and password combination.
            Returns a JsonWebToken used for authorization in any further calls to the API.
            </summary>
            <param name="gameId">ID of the game the user is logging into.</param>
            <param name="account"><see cref="T:PlayGen.SUGAR.Contracts.Shared.AccountRequest"/> object that contains the account details provided.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.AccountResponse"/> containing the Account details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AccountClient.Register(PlayGen.SUGAR.Contracts.Shared.AccountRequest)">
            <summary>
            Register a new account and creates an associated user.
            Requires the <see cref="P:PlayGen.SUGAR.Contracts.Shared.AccountRequest.Name"/> to be unique.
            Returns a JsonWebToken used for authorization in any further calls to the API.
            </summary>
            <param name="accountRequest"><see cref="T:PlayGen.SUGAR.Contracts.Shared.AccountRequest"/> object that contains the details of the new Account.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.AccountResponse"/> containing the new Account details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AccountClient.Register(System.Int32,PlayGen.SUGAR.Contracts.Shared.AccountRequest)">
            <summary>
            Register a new account and creates an associated user.
            Requires the <see cref="P:PlayGen.SUGAR.Contracts.Shared.AccountRequest.Name"/> to be unique.
            Returns a JsonWebToken used for authorization in any further calls to the API.
            </summary>
            <param name="accountRequest"><see cref="T:PlayGen.SUGAR.Contracts.Shared.AccountRequest"/> object that contains the details of the new Account.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.AccountResponse"/> containing the new Account details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AccountClient.RegisterWithExisting(System.Int32,PlayGen.SUGAR.Contracts.Shared.AccountRequest)">
            <summary>
            Register a new account for an existing user.
            Requires the <see cref="P:PlayGen.SUGAR.Contracts.Shared.AccountRequest.Name"/> to be unique.
            Returns a JsonWebToken used for authorization in any further calls to the API.
            
            </summary>
            <param name="userId">ID of the existing User.</param>
            <param name="newAccount"><see cref="T:PlayGen.SUGAR.Contracts.Shared.AccountRequest"/> object that contains the details of the new Account.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.AccountResponse"/> containing the new Account details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AccountClient.Delete(System.Int32)">
            <summary>
            Delete Accounts with the ID provided.
            </summary>
            <param name="id">Account ID.</param>
        </member>
        <member name="T:PlayGen.SUGAR.Client.AchievementClient">
            <summary>
            Controller that facilitates Achievement specific operations.
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.GetGlobalById(System.String)">
            <summary>
            Find a Global Achievement that matches <param name="token"/>.
            </summary>
            <param name="token">Token of Achievement</param>
            <returns>Returns <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse"/> that holds Achievement details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.GetById(System.String,System.Int32)">
            <summary>
            Find a Achievement that matches <param name="token"/> and <param name="gameId"/>.
            </summary>
            <param name="token">Token of Achievement</param>
            <param name="gameId">ID of the Game the Achievement is for</param>
            <returns>Returns <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse"/> that holds Achievement details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.GetAllGlobal">
            <summary>
            Get all global achievements, ie. achievements that are not associated with a specific game
            </summary>
            <returns>Returns multiple <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse"/> that hold Achievement details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.GetByGame(System.Int32)">
            <summary>
            Find a list of Achievements that match <param name="gameId"/>.
            </summary>
            <param name="gameId">game ID</param>
            <returns>Returns multiple <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse"/> that hold Achievement details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.GetGlobalProgress(System.Int32)">
            <summary>
            Find the current progress for all global achievements for <param name="actorId"/>.
            </summary>
            <param name="actorId">ID of Group/User</param>
            <returns>Returns multiple <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse"/> that hold Achievement progress details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.GetGameProgress(System.Int32,System.Int32)">
            <summary>
            Find the current progress for all achievements for a <param name="gameId"/> for <param name="actorId"/>.
            </summary>
            <param name="gameId">ID of Game</param>
            <param name="actorId">ID of Group/User</param>
            <returns>Returns multiple <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse"/> that hold current progress toward achievement.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.GetGlobalAchievementProgress(System.String,System.Int32)">
            <summary>
            Find the current progress for an Achievement for <param name="actorId"/>.
            </summary>
            <param name="token">Token of Achievement</param>
            <param name="actorId">ID of actor/User</param>
            <returns>Returns <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse"/> that hold current progress toward achievement.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.GetAchievementProgress(System.String,System.Int32,System.Int32)">
            <summary>
            Find the current progress for an Achievement for <param name="actorId"/>.
            </summary>
            <param name="token">Token of Achievement</param>
            <param name="gameId">ID of the Game the Achievement is for</param>
            <param name="actorId">ID of actor/User</param>
            <returns>Returns <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse"/> that hold current progress toward achievement.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.Create(PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest)">
            <summary>
            Create a new Achievement.
            Requires <see cref="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest.Name"/> to be unique to that <see cref="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest.GameId"/>.
            </summary>
            <param name="newAchievement"><see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest"/> object that holds the details of the new Achievement.</param>
            <returns>Returns a <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse"/> object containing details for the newly created Achievement.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.Update(PlayGen.SUGAR.Contracts.Shared.EvaluationUpdateRequest)">
            <summary>
            Update an existing Achievement.
            </summary>
            <param name="achievement"><see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest"/> object that holds the details of the Achievement.</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.DeleteGlobal(System.String)">
            <summary>
            Delete a global achievement, ie. an achievement that is not associated with a specific game
            </summary>
            <param name="token">Token of Achievement</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.Delete(System.String,System.Int32)">
            <summary>
            Delete Achievement with the <param name="token"/> and <param name="gameId"/> provided.
            </summary>
            <param name="token">Token of Achievement</param>
            <param name="gameId">ID of the Game the Achievement is for</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.EnableNotifications(System.Boolean)">
            <summary>
            Sets flag to return pending achievement notifications from the server as they become available.
            </summary>
            <param name="enable">Whether to enable or disable notifications.</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.AchievementClient.TryGetPendingNotification(PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotification@)">
            <summary>
            Gets pending achievement progress notifications.
            </summary>
            <param name="notification"></param>
            <returns>Returns a boolean value indicating whether there was a notification to retrieve or not.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.ClientBase.GetUriBuilder(System.String,System.Object[])">
            <summary>
            Get a UriBuilder object with the origin and web api path
            </summary>
            <param name="apiSuffix">WebAPI path relative to web origin, eg. /api</param>
            <param name="param">URI para</param>
            <returns></returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.ClientBase.UnwrapResponse``1(PlayGen.SUGAR.Client.HttpResponse)">
            <summary>
            
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.ClientBase.ProcessResponse(PlayGen.SUGAR.Client.HttpResponse,System.Collections.Generic.IEnumerable{System.Net.HttpStatusCode})">
            <summary>
            Inspect the web response status code, returns on success or throw.
            </summary>
            <param name="response"></param>
            <param name="expectedStatusCodes"></param>
            <exception cref="T:System.Exception">HTTP Status Code not equal to 200 (OK)</exception>
        </member>
        <member name="M:PlayGen.SUGAR.Client.DefaultHttpHandler.SendData(System.Net.WebRequest,System.Byte[])">
            <summary>
            Set the content stream and related properties of the specified WebRequest object with the byte array
            </summary>
            <param name="request"></param>
            <param name="payload"></param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.DefaultHttpHandler.ExecuteRequest(PlayGen.SUGAR.Client.HttpRequest)">
            <summary>
            Create a WebRequest for the specified uri and HTTP verb
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:PlayGen.SUGAR.Client.GameClient">
            <summary>
            Controller that facilitates Game specific operations.
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GameClient.Get">
            <summary>
            Get a list of all Games.
            </summary>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.GameResponse"/> that hold Games details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GameClient.Get(System.String)">
            <summary>
            Get a list of Games that match <param name="name"/> provided.
            </summary>
            <param name="name">Game name</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.GameResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GameClient.Get(System.Int32)">
            <summary>
            Get Game that matches <param name="id"/> provided.
            </summary>
            <param name="id">Game id</param>
            <returns><see cref="T:PlayGen.SUGAR.Contracts.Shared.GameResponse"/> which matches search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GameClient.Create(PlayGen.SUGAR.Contracts.Shared.GameRequest)">
            <summary>
            Create a new Game.
            Requires the <see cref="P:PlayGen.SUGAR.Contracts.Shared.GameRequest.Name"/> to be unique.
            </summary>
            <param name="game"><see cref="T:PlayGen.SUGAR.Contracts.Shared.GameRequest"/> object that contains the details of the new Game.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.GameResponse"/> containing the new Game details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GameClient.Update(System.Int32,PlayGen.SUGAR.Contracts.Shared.GameRequest)">
            <summary>
            Update an existing Game.
            </summary>
            <param name="id">Id of the existing Game.</param>
            <param name="game"><see cref="T:PlayGen.SUGAR.Contracts.Shared.GameRequest"/> object that holds the details of the Game.</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GameClient.Delete(System.Int32)">
            <summary>
            Delete Game with the ID provided.
            </summary>
            <param name="id">Game ID.</param>
        </member>
        <member name="T:PlayGen.SUGAR.Client.GameDataClient">
            <summary>
            Controller that facilitates GameData specific operations.
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GameDataClient.Get(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String[])">
            <summary>
            Find a list of all GameData that match the <param name="actorId"/>, <param name="gameId"/> and <param name="key"/> provided.
            </summary>
            <param name="actorId">ID of a User/Group.</param>
            <param name="gameId">ID of a Game.</param>
            <param name="key">Array of Key names.</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.SaveDataResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GameDataClient.Add(PlayGen.SUGAR.Contracts.Shared.SaveDataRequest)">
            <summary>
            Create a new GameData record.
            </summary>
            <param name="data"><see cref="T:PlayGen.SUGAR.Contracts.Shared.SaveDataRequest"/> object that holds the details of the new GameData.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.SaveDataResponse"/> containing the new GameData details.</returns>
        </member>
        <member name="T:PlayGen.SUGAR.Client.GroupClient">
            <summary>
            Controller that facilitates Group specific operations.
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupClient.Get">
            <summary>
            Get a list of all Groups.
            </summary>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> that hold Group details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupClient.Get(System.String)">
            <summary>
            Get a list of Groups that match <param name="name"/> provided.
            </summary>
            <param name="name">Group name.</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupClient.Get(System.Int32)">
            <summary>
            Get Group that matches <param name="id"/> provided.
            </summary>
            <param name="id">Group id.</param>
            <returns><see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> which matches search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupClient.Create(PlayGen.SUGAR.Contracts.Shared.ActorRequest)">
            <summary>
            Create a new Group.
            Requires the <see cref="P:PlayGen.SUGAR.Contracts.Shared.ActorRequest.Name"/> to be unique for Groups.
            </summary>
            <param name="actor"><see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorRequest"/> object that holds the details of the new Group.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> containing the new Group details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupClient.Update(System.Int32,PlayGen.SUGAR.Contracts.Shared.ActorRequest)">
            <summary>
            Update an existing Group.
            </summary>
            <param name="id">Id of the existing Group.</param>
            <param name="group"><see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorRequest"/> object that holds the details of the Group.</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupClient.Delete(System.Int32)">
            <summary>
            Delete group with the <param name="id"/> provided.
            </summary>
            <param name="id">Group ID.</param>
        </member>
        <member name="T:PlayGen.SUGAR.Client.GroupMemberClient">
            <summary>
            Controller that facilitates User to Group relationship specific operations.
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupMemberClient.GetMemberRequests(System.Int32)">
            <summary>
            Get a list of all Users that have relationship requests for this <param name="groupId"/>.
            </summary>
            <param name="groupId">ID of the group.</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupMemberClient.GetSentRequests(System.Int32)">
            <summary>
            Get a list of all Groups that have been sent relationship requests for this <param name="userId"/>.
            </summary>
            <param name="userId">ID of the user.</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupMemberClient.GetMembers(System.Int32)">
            <summary>
            Get a list of all Users that have relationships with this <param name="groupId"/>.
            </summary>
            <param name="groupId">ID of the group.</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupMemberClient.GetUserGroups(System.Int32)">
            <summary>
            Get a list of all Groups that have relationships with this <param name="userId"/>.
            </summary>
            <param name="userId">ID of the User.</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupMemberClient.CreateMemberRequest(PlayGen.SUGAR.Contracts.Shared.RelationshipRequest)">
            <summary>
            Create a new relationship request between the User and Group.
            Requires a relationship between the User and Group to not already exist.
            </summary>
            <param name="relationship"><see cref="T:PlayGen.SUGAR.Contracts.Shared.RelationshipRequest"/> object that holds the details of the new relationship request.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.RelationshipResponse"/> containing the new Relationship details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupMemberClient.UpdateMemberRequest(PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate)">
            <summary>
            Update an existing relationship request between <param name="relationship.UserId.UserId"/> and <param name="relationship.GroupId.GroupId"/>.
            Requires the relationship request to already exist between the User and Group.
            </summary>
            <param name="relationship"><see cref="T:PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate"/> object that holds the details of the relationship.</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.GroupMemberClient.UpdateMember(PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate)">
            <summary>
            Update an existing relationship between <param name="relationship.UserId.UserId"/> and <param name="relationship.GroupId.GroupId"/>.
            Requires the relationship to already exist between the User and Group.
            </summary>
            <param name="relationship"><see cref="T:PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate"/> object that holds the details of the relationship.</param>
        </member>
        <member name="T:PlayGen.SUGAR.Client.LeaderboardClient">
            <summary>
            Controller that facilitates Leaderboard specific operations.
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.LeaderboardClient.GetGlobal">
            <summary>
            Get all global leaderboards, ie. leaderboards that are not associated with a specific game
            </summary>
            <returns>Returns multiple <see cref="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse"/> that hold Leaderboard details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.LeaderboardClient.Get(System.Int32)">
            <summary>
            Find a list of leaderboards that match <param name="gameId"/>.
            </summary>
            <param name="gameId">Game ID</param>
            <returns>Returns multiple <see cref="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse"/> that hold Leaderboard details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.LeaderboardClient.GetGlobal(System.String)">
            <summary>
            Find a single global leaderboard matching the token.
            </summary>
            <param name="token">Token </param>
            <returns>Returns a single <see cref="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse"/> that holds Leaderboard details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.LeaderboardClient.Get(System.String,System.Int32)">
            <summary>
            Find a single leaderboard matching the token and gameId.
            </summary>
            <param name="token">Token </param>
            <param name="gameId"></param>
            <returns>Returns a single <see cref="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse"/> that holds Leaderboard details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.LeaderboardClient.Create(PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest)">
            <summary>
            Create a new Leaderboard.
            Requires <see cref="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest.Name"/> and <see cref="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest.Token"/> to be unique to that <see cref="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest.GameId"/>.
            </summary>
            <param name="newLeaderboard"><see cref="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest"/> object that holds the details of the new Leaderboard.</param>
            <returns>Returns a <see cref="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse"/> object containing details for the newly created Leaderboard.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.LeaderboardClient.CreateGetLeaderboardStandings(PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest)">
            <summary>
            Get the standings for a Leaderboard using a <see cref="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest"/>.
            </summary>
            <param name="leaderboardDetails"><see cref="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest"/> object that holds the details that are wanted from the Leaderboard.</param>
            <returns>Returns multiple <see cref="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsResponse"/> that hold actor positions in the leaderboard.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.LeaderboardClient.Update(PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest)">
            <summary>
            Update an existing Leaderboard.
            </summary>
            <param name="leaderboard"><see cref="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest"/> object that holds the details of the Leaderboard.</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.LeaderboardClient.DeleteGlobal(System.String)">
            <summary>
            Delete a global leaderboard, ie. a leaderboard that is not associated with a specific game
            </summary>
            <param name="token">Token of Leaderboard</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.LeaderboardClient.Delete(System.String,System.Int32)">
            <summary>
            Delete Leaderboards with the <param name="gameId"/> and <param name="token"/> provided.
            </summary>
            <param name="token">Token of Leaderboard</param>
            <param name="gameId">ID of the Game the Leaderboard is for</param>
        </member>
        <member name="T:PlayGen.SUGAR.Client.ResourceClient">
            <summary>
            Controller that facilitates Resource specific operations.
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.ResourceClient.Get(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String[])">
            <summary>
            Find a list of all Resources that match the <param name="gameId"/>, <param name="actorId"/> and <param name="keys"/> provided.
            </summary>
            <param name="gameId">ID of a Game.</param>
            <param name="actorId">ID of a User/Group.</param>
            <param name="keys">Array of Key names.</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ResourceResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.ResourceClient.AddOrUpdate(PlayGen.SUGAR.Contracts.Shared.ResourceAddRequest)">
            <summary>
            Create or Updates a Resource record.
            </summary>
            <param name="data"><see cref="T:PlayGen.SUGAR.Contracts.Shared.ResourceAddRequest"/> object that holds the details of the new Resource.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.ResourceResponse"/> containing the new Resource details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.ResourceClient.Transfer(PlayGen.SUGAR.Contracts.Shared.ResourceTransferRequest)">
            <summary>
            Transfers a quantity of a specific resource.
            </summary>
            <param name="data"></param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.ResourceTransferResponse"/> containing the modified resources.</returns>
        </member>
        <member name="T:PlayGen.SUGAR.Client.SkillClient">
            <summary>
            Controller that facilitates Skill specific operations.
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.GetGlobalById(System.String)">
            <summary>
            Find a Global Skill that matches <param name="token"/>.
            </summary>
            <param name="token">Token of Skill</param>
            <returns>Returns <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse"/> that holds Skill details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.GetById(System.String,System.Int32)">
            <summary>
            Find a Skill that matches <param name="token"/> and <param name="gameId"/>.
            </summary>
            <param name="token">Token of Skill</param>
            <param name="gameId">ID of the Game the Skill is for</param>
            <returns>Returns <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse"/> that holds Skill details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.GetAllGlobal">
            <summary>
            Get all global skills, ie. skills that are not associated with a specific game
            </summary>
            <returns>Returns multiple <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse"/> that hold Skill details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.GetByGame(System.Int32)">
            <summary>
            Find a list of Skills that match <param name="gameId"/>.
            </summary>
            <param name="gameId">Game ID</param>
            <returns>Returns multiple <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse"/> that hold Skill details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.GetGlobalProgress(System.Int32)">
            <summary>
            Find the current progress for all global skills for <param name="actorId"/>.
            </summary>
            <param name="actorId">ID of Group/User</param>
            <returns>Returns multiple <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse"/> that hold Skill progress details</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.GetGameProgress(System.Int32,System.Int32)">
            <summary>
            Find the current progress for all skills for a <param name="gameId"/> for <param name="actorId"/>.
            </summary>
            <param name="gameId">ID of Game</param>
            <param name="actorId">ID of Group/User</param>
            <returns>Returns multiple <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse"/> that hold current progress toward skill.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.GetGlobalSkillProgress(System.String,System.Int32)">
            <summary>
            Find the current progress for an Skill for <param name="actorId"/>.
            </summary>
            <param name="token">Token of Skill</param>
            <param name="actorId">ID of actor/User</param>
            <returns>Returns <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse"/> that hold current progress toward skill.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.GetSkillProgress(System.String,System.Int32,System.Int32)">
            <summary>
            Find the current progress for a Skill for <param name="actorId"/>.
            </summary>
            <param name="token">Token of Skill</param>
            <param name="gameId">ID of the Game the Skill is for</param>
            <param name="actorId">ID of Group/User</param>
            <returns>Returns <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse"/> that hold current progress toward skill.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.Create(PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest)">
            <summary>
            Create a new Skill.
            Requires <see cref="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest.Name"/> to be unique to that <see cref="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest.GameId"/>.
            </summary>
            <param name="newSkill"><see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest"/> object that holds the details of the new Skill.</param>
            <returns>Returns a <see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse"/> object containing details for the newly created Skill.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.Update(PlayGen.SUGAR.Contracts.Shared.EvaluationUpdateRequest)">
            <summary>
            Update an existing Skill.
            </summary>
            <param name="skill"><see cref="T:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest"/> object that holds the details of the Skill.</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.DeleteGlobal(System.String)">
            <summary>
            Delete a global skill, ie. a skill that is not associated with a specific game
            </summary>
            <param name="token">Token of Skill</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.Delete(System.String,System.Int32)">
            <summary>
            Delete Skill with the  <param name="token"/> and <param name="gameId"/> provided.
            </summary>
            <param name="token">Token of Skill</param>
            <param name="gameId">ID of the Game the Skill is for</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.EnableNotifications(System.Boolean)">
            <summary>
            Sets flag to return pending skill notifications from the server as they become available.
            </summary>
            <param name="enable">Whether to enable or disable notifications.</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.SkillClient.TryGetPendingNotification(PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotification@)">
            <summary>
            Gets pending skill progress notifications.
            </summary>
            <param name="notification"></param>
            <returns>Returns a boolean value indicating whether there was a notification to retrieve or not.</returns>
        </member>
        <member name="T:PlayGen.SUGAR.Client.UserClient">
            <summary>
            Controller that facilitates User specific operations.
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserClient.Get">
            <summary>
            Get a list of all Users.
            </summary>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> that hold User details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserClient.Get(System.String,System.Boolean)">
            <summary>
            Get a list of Users that match <param name="name"/> provided.
            </summary>
            <param name="name">Array of User names.</param>
            <param name="exactMatch">Match the name exactly.</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserClient.Get(System.Int32)">
            <summary>
            Get User that matches <param name="id"/> provided.
            </summary>
            <param name="id">User id.</param>
            <returns><see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> which matches search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserClient.Create(PlayGen.SUGAR.Contracts.Shared.ActorRequest)">
            <summary>
            Create a new User.
            Requires the <see cref="P:PlayGen.SUGAR.Contracts.Shared.ActorRequest.Name"/> to be unique for Users.
            </summary>
            <param name="actor"><see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorRequest"/> object that holds the details of the new User.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> containing the new User details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserClient.Update(System.Int32,PlayGen.SUGAR.Contracts.Shared.ActorRequest)">
            <summary>
            Update an existing User.
            </summary>
            <param name="id">Id of the existing User.</param>
            <param name="user"><see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorRequest"/> object that holds the details of the User.</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserClient.Delete(System.Int32)">
            <summary>
            Delete User with the <param name="id"/> provided.
            </summary>
            <param name="id">User ID.</param>
        </member>
        <member name="T:PlayGen.SUGAR.Client.UserFriendClient">
            <summary>
            Controller that facilitates User to User relationship specific operations.
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserFriendClient.GetFriendRequests(System.Int32)">
            <summary>
            Get a list of all Users that have relationship requests for this <param name="userId"/>.
            </summary>
            <param name="userId">ID of the group.</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserFriendClient.GetSentRequests(System.Int32)">
            <summary>
            Get a list of all Users that have been sent relationship requests for this <param name="userId"/>.
            </summary>
            <param name="userId">ID of the user.</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserFriendClient.GetFriends(System.Int32)">
            <summary>
            Get a list of all Users that have relationships with this <param name="userId"/>.
            </summary>
            <param name="userId">ID of the group.</param>
            <returns>A list of <see cref="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse"/> which match the search criteria.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserFriendClient.CreateFriendRequest(PlayGen.SUGAR.Contracts.Shared.RelationshipRequest)">
            <summary>
            Create a new relationship request between two Users.
            Requires a relationship between the two to not already exist.
            </summary>
            <param name="relationship"><see cref="T:PlayGen.SUGAR.Contracts.Shared.RelationshipRequest"/> object that holds the details of the new relationship request.</param>
            <returns>A <see cref="T:PlayGen.SUGAR.Contracts.Shared.RelationshipResponse"/> containing the new Relationship details.</returns>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserFriendClient.UpdateFriendRequest(PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate)">
            <summary>
            Update an existing relationship request between <param name="relationship.RequestorId.RequestorId"/> and <param name="relationship.AcceptorId.AcceptorId"/>.
            Requires the relationship request to already exist between the two Users.
            </summary>
            <param name="relationship"><see cref="T:PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate"/> object that holds the details of the relationship.</param>
        </member>
        <member name="M:PlayGen.SUGAR.Client.UserFriendClient.UpdateFriend(PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate)">
            <summary>
            Update an existing relationship between <param name="relationship.RequestorId.RequestorId"/> and <param name="relationship.AcceptorId.AcceptorId"/>.
            Requires the relationship to already exist between the two Users.
            </summary>
            <param name="relationship"><see cref="T:PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate"/> object that holds the details of the relationship.</param>
        </member>
        <member name="P:PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotification.Actor">
            <summary>
            The details of the actor whose progress was being checked.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotification.Name">
            <summary>
            The name of the achievement/skill which progress was being checked for.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotification.Progress">
            <summary>
            Progress of current achievement/skill [0 to 1].
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Client.EvaluationEvents.EvaluationNotification.Type">
            <summary>
            Skill or Achievement
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Client.Extensions.UriBuilderExtensions.AppendQueryParameters``1(System.UriBuilder,``0[],System.String)">
            <summary>
            Builds a Query string to pass to the API from an objects of objects. 
            </summary>
            <param name="uri">Part of t</param>
            <param name="objects">Array of objects to be serialised</param>
            <param name="formatString">This expects a composite format string in the form of param={0}</param>
            <returns></returns>
        </member>
        <member name="T:PlayGen.SUGAR.Common.Shared.ActorType">
            <summary>
            Enum for selecting the target type of actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.ActorType.Undefined">
            <summary>
            Intended for either Users or Groups.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.ActorType.User">
            <summary>
            Intended for just Users.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.ActorType.Group">
            <summary>
            Intended for just Groups.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Common.Shared.ComparisonType">
            <summary>
            Enum for selecting target comparison between current value and target value.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.ComparisonType.Equals">
            <summary>
            Current and target are equal in value.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.ComparisonType.NotEqual">
            <summary>
            Current and target are not equal in value.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.ComparisonType.Greater">
            <summary>
            Current is greater in value than the target.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.ComparisonType.GreaterOrEqual">
            <summary>
            Current is greater than or equal to the value of the target.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.ComparisonType.Less">
            <summary>
            Current is less than the value of the target.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.ComparisonType.LessOrEqual">
            <summary>
            Current is less than or equal to the value of the target.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Common.Shared.CriteriaQueryType">
            <summary>
            Enum for selecting what values will be used to query if criteria is met.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.CriteriaQueryType.Any">
            <summary>
            Check if any singular piece of GameData matches the criteria.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.CriteriaQueryType.Sum">
            <summary>
            Check if a sum of all GameData for that key matches the crteria (Long and Float only).
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.CriteriaQueryType.Latest">
            <summary>
            Check if the most recent piece of GameData matches the criteria.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Common.Shared.CriteriaScope">
            <summary>
            Enum for selecting if GameData is to checked against just the actor in question or other actors relating to them (i.e. group members)
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.CriteriaScope.Actor">
            <summary>
            Test the criteria against the specified actor
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.CriteriaScope.RelatedActors">
            <summary>
            Test the criteria against the specified actors relations
            ie. a users friends, or a groups members
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Common.Shared.EvaluationCriteria">
            <summary>
            Encapsulates requirements for completing an achievement or skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Common.Shared.EvaluationCriteria.Key">
            <summary>
            The key which will be queried against to check if criteria is met.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Common.Shared.EvaluationCriteria.DataType">
            <summary>
            SaveDataType of the key which is being queried.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Common.Shared.EvaluationCriteria.CriteriaQueryType">
            <summary>
            Which stored GameData will be queried.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Common.Shared.EvaluationCriteria.ComparisonType">
            <summary>
            How the target value and the actual value will be compared.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Common.Shared.EvaluationCriteria.Scope">
            <summary>
            Whether the criteria will be checked against the actor or related actors (i.e. group members, user friends).
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Common.Shared.EvaluationCriteria.Value">
            <summary>
            The value which will compared against in order to see if the criteria has been met.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Common.Shared.EvaluationType">
            <summary>
            Enum for selecting the category of evaluation being stored or looked for.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.EvaluationType.Achievement">
            <summary>
            Achievement evaluation type
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.EvaluationType.Skill">
            <summary>
            Skill evaluation type
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Common.Shared.LeaderboardFilterType">
            <summary>
            Enum for selecting subsection of users for current standings of a leaderboard.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.LeaderboardFilterType.Top">
            <summary>
            Provides standings based off the global ranking of the leaderboard.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.LeaderboardFilterType.Near">
            <summary>
            Provides standings in relation to the actorId provided. 
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.LeaderboardFilterType.Friends">
            <summary>
            Provides only the standings of those who are friends of the actorId provided.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.LeaderboardFilterType.GroupMembers">
            <summary>
            Provides only the standings of those who are members of the actorId provided.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Common.Shared.LeaderboardType">
            <summary>
            Enum for selecting the type and sorting order of the leaderboard being created.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.LeaderboardType.Highest">
            <summary>
            Sort by the highest GameData values for a key. Only the highest is taken for each Actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.LeaderboardType.Lowest">
            <summary>
            Sort by the lowest GameData values for a key. Only the lowest is taken for each Actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.LeaderboardType.Cumulative">
            <summary>
            Sort by the highest sum of GameData values for a key for an actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.LeaderboardType.Count">
            <summary>
            Sort by the highest count of a GameData key for an actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.LeaderboardType.Earliest">
            <summary>
            Sort by the earliest occurence of a GameData key. Only the earliest 'DateCreation' is taken for each Actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.LeaderboardType.Latest">
            <summary>
            Sort by the most recent occurence of a GameData key. Only the most recent 'DateModified' is taken for each Actor.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Common.Shared.Reward">
            <summary>
            Encapsulates the reward given for completing an achievement or skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Common.Shared.Reward.Key">
            <summary>
            The key which will be stored in GameData.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Common.Shared.Reward.DataType">
            <summary>
            SaveDataType of the value for this GameData.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Common.Shared.Reward.Value">
            <summary>
            The value of the GameData.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Common.Shared.SaveDataType">
            <summary>
            Enum for selecting the type of data being stored or looked for.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.SaveDataType.String">
            <summary>
            A non-numeric set of characters.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.SaveDataType.Long">
            <summary>
            Numeric value with no decimal places.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.SaveDataType.Float">
            <summary>
            Numeric value with decimal places.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Common.Shared.SaveDataType.Boolean">
            <summary>
            True or false.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.AccountRequest">
            <summary>
            Encapsulates log-in details.
            </summary>
            <example>
            JSON
            {
            Name : "User Name",
            Password : "Their Password",
            AutoLogin : true
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountRequest.Name">
            <summary>
            The user's log-in name.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountRequest.Password">
            <summary>
            The user's password.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountRequest.SourceToken">
            <summary>
            The source from which the user is trying to log-in.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountRequest.AutoLogin">
            <summary>
            Whether the user will be logged in upon registering.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.AccountResponse">
            <summary>
            Encapsulates user and token details at log-in.
            </summary>
            <example>
            JSON
            {
            User : {
            Id : 1,
            Name : "User Name"
            }
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountResponse.User">
            <summary>
            ActorResponse object containing the user details.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.AccountSourceRequest">
            <summary>
            Encapsulates log-in source details.
            </summary>
            <example>
            JSON
            {
            Name : "SUGAR",
            RequiresPassword : true
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountSourceRequest.Description">
            <summary>
            The source description.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountSourceRequest.Token">
            <summary>
            The source token.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountSourceRequest.RequiresPassword">
            <summary>
            Whether the user needs to pass a password when logging in via this source
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.AccountSourceResponse">
            <summary>
            Encapsulates log-in source details.
            </summary>
            <example>
            JSON
            {
            User : {
            Id : 1,
            Name : "SUGAR",
            RequiresPassword : true
            }
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountSourceResponse.Id">
            <summary>
            The unqiue identifier for the game.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountSourceResponse.Description">
            <summary>
            The source description.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountSourceResponse.Token">
            <summary>
            The source token.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.AccountSourceResponse.RequiresPassword">
            <summary>
            Whether the user needs to pass a password when logging in via this source
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.ActorClaimRequest">
            <summary>
            Encapsulates actorclaim details.
            </summary>
            <example>
            JSON
            {
            ActorId : 1,
            ClaimId : 1,
            EntityId : 1
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorClaimRequest.ActorId">
            <summary>
            The ID of the actor related to this actorclaim.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorClaimRequest.ClaimId">
            <summary>
            The ID of the claim related to this actorclaim.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorClaimRequest.EntityId">
            <summary>
            The ID of the entity (game, actor etc) related to this actorclaim.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.ActorClaimResponse">
            <summary>
            Encapsulates actorclaim details from the server.
            </summary>
            <example>
            JSON
            {
            Id : 1,
            ActorId : 1,
            RoleId : 1,
            EntityId : 1
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorClaimResponse.Id">
            <summary>
            The unqiue identifier for the actorclaim.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorClaimResponse.ActorId">
            <summary>
            The ID of the actor related to this actorclaim.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorClaimResponse.ClaimId">
            <summary>
            The ID of the claim related to this actorclaim.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorClaimResponse.EntityId">
            <summary>
            The ID of the entity (game, actor etc) related to this actorclaim.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.ActorRequest">
            <summary>
            Encapsulates user and group details.
            </summary>
            <example>
            JSON
            {
            Name : "Actor Name"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorRequest.Name">
            <summary>
            The display name of the user/group.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.ActorResponse">
            <summary>
            Encapsulates user and group details from the server.
            </summary>
            <example>
            JSON
            {
            Id : 1,
            Name : "Actor Name"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorResponse.Id">
            <summary>
            The unqiue identifier for the user/group.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorResponse.Name">
            <summary>
            The display name of the user/group.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.ActorRoleRequest">
            <summary>
            Encapsulates actorrole details.
            </summary>
            <example>
            JSON
            {
            ActorId : 1,
            RoleId : 1,
            EntityId : 1
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorRoleRequest.ActorId">
            <summary>
            The ID of the actor related to this actorrole.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorRoleRequest.RoleId">
            <summary>
            The ID of the role related to this actorrole.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorRoleRequest.EntityId">
            <summary>
            The ID of the entity (game, actor etc) related to this actorrole.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.ActorRoleResponse">
            <summary>
            Encapsulates actorrole details from the server.
            </summary>
            <example>
            JSON
            {
            Id : 1,
            ActorId : 1,
            RoleId : 1,
            EntityId : 1
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorRoleResponse.Id">
            <summary>
            The unqiue identifier for the actorrole.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorRoleResponse.ActorId">
            <summary>
            The ID of the actor related to this actorrole.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorRoleResponse.RoleId">
            <summary>
            The ID of the role related to this actorrole.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ActorRoleResponse.EntityId">
            <summary>
            The ID of the entity (game, actor etc) related to this actorrole.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.ClaimResponse">
            <summary>
            Encapsulates role details.
            </summary>
            <example>
            JSON
            {
            Id : 1,
            Token : "CreateGame",
            Description : "Allows for the creation of new games",
            ClaimScope : "Game"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ClaimResponse.Id">
            <summary>
            The ID of the claim.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ClaimResponse.Token">
            <summary>
            The display name for the claim.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ClaimResponse.Description">
            <summary>
            A description of the claim.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ClaimResponse.ClaimScope">
            <summary>
            The ClaimScope of this claim.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest">
            <summary>
            Encapsulates achievement/skill details.
            </summary>
            <example>
            JSON
            {
            Token : "AN_ACHIEVEMENT_TOKEN",
            GameId : 1,
            Name : "Achievement Unlocked",
            Description : "Fulfil the criteria to get the reward",
            ActorType : "User",
            EvaluationCriteria : [{
            Key : "Criteria Key",
            DataType : "Long",
            CriteriaQueryType : "Any",
            ComparisonType : "Equals",
            Scope : "Actor",
            Value : "5"
            }],
            Reward : [{
            Key : "Reward Key",
            DataType : "Float",
            Value : "10.5"
            }]
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest.Token">
            <summary>
            A unique identifier used in development to reference the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest.GameId">
            <summary>
            The ID of the Game which this achievement/skill should belong to. Can be left null to make the achievement/skill system-wide.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest.Name">
            <summary>
            The display name for the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest.Description">
            <summary>
            The description of the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest.ActorType">
            <summary>
            The type of actor which this achievement/skill is intended to be completed by.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest.EvaluationCriterias">
            <summary>
            A list of criteria which will be checked in order to see if an actor has completed the achievement/skill.
            Must contain at least one criteria.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCreateRequest.Rewards">
            <summary>
            A list of rewards that will be provided to the actor upon completion of the achievement/skill criteria.
            An achievement does not need to contain a reward.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.EvaluationCriteriaCreateRequest">
            <summary>
            Encapsulates requirements for completing an achievement or skill.
            </summary>
            <example>
            JSON
            {
            Key : "GameData Key",
            DataType : "String",
            CriteriaQueryType : "Any",
            ComparisonType : "Equals",
            Scope : "Actor",
            Value : "GameData Key Value"
            }
            </example>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.EvaluationCriteriaResponse">
            <summary>
            Encapsulates requirements for completing an achievement or skill.
            </summary>
            <example>
            JSON
            {
            Key : "GameData Key",
            DataType : "String",
            CriteriaQueryType : "Any",
            ComparisonType : "Equals",
            Scope : "Actor",
            Value : "GameData Key Value"
            }
            </example>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.EvaluationCriteriaUpdateRequest">
            <summary>
            Encapsulates requirements for completing an achievement or skill.
            </summary>
            <example>
            JSON
            {
            Key : "GameData Key",
            DataType : "String",
            CriteriaQueryType : "Any",
            ComparisonType : "Equals",
            Scope : "Actor",
            Value : "GameData Key Value"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationCriteriaUpdateRequest.Id">
            <summary>
            The unqiue identifier for this type.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse">
            <summary>
            Encapsulates current progress to completing an achievement.
            </summary>
            <example>
            JSON
            {
            Actor : [{
            Id : 1,
            Name : "Name"
            }],
            Name : "Achievement Unlocked",
            Progress : 0
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse.Actor">
            <summary>
            The details of the actor whose progress was being checked.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse.Name">
            <summary>
            The name of the achievement/skill which progress was being checked for.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse.Progress">
            <summary>
            Progress of current achievement/skill [0 to 1].
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationProgressResponse.Type">
            <summary>
            Skill or Achievement
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse">
            <summary>
            Encapsulates achievement/skill details returned from the server.
            </summary>
            <example>
            JSON
            {
            Token : "AN_ACHIEVEMENT_TOKEN",
            GameId : 1,
            Name : "Achievement Unlocked",
            Description : "Fulfil the criteria to get the reward",
            ActorType : "User",
            EvaluationCriteria : [{
            Key : "Criteria Key",
            DataType : "Long",
            CriteriaQueryType : "Any",
            ComparisonType : "Equals",
            Scope : "Actor",
            Value : "5"
            }],
            Reward : [{
            Key : "Reward Key",
            DataType : "Float",
            Value : "10.5"
            }]
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse.Id">
            <summary>
            The unqiue identifier for the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse.Token">
            <summary>
            A unique identifier used in development to reference the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse.GameId">
            <summary>
            The ID of the Game which this achievement/skill belongs to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse.Name">
            <summary>
            The display name for the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse.Description">
            <summary>
            The description of the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse.ActorType">
            <summary>
            The type of actor which this achievement/skill is intended to be completed by.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse.EvaluationCriterias">
            <summary>
            A list of criteria which is checked in order to see if an actor has completed the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationResponse.Rewards">
            <summary>
            A list of rewards that is provided to the actor upon completion of the achievement/skill criteria.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.EvaluationUpdateRequest">
            <summary>
            Encapsulates achievement/skill details.
            </summary>
            <example>
            JSON
            {
            Token : "AN_ACHIEVEMENT_TOKEN",
            GameId : 1,
            Name : "Achievement Unlocked",
            Description : "Fulfil the criteria to get the reward",
            ActorType : "User",
            EvaluationCriteria : [{
            Key : "Criteria Key",
            DataType : "Long",
            CriteriaQueryType : "Any",
            ComparisonType : "Equals",
            Scope : "Actor",
            Value : "5"
            }],
            Reward : [{
            Key : "Reward Key",
            DataType : "Float",
            Value : "10.5"
            }]
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationUpdateRequest.Id">
            <summary>
            The unqiue identifier for the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationUpdateRequest.Token">
            <summary>
            A unique identifier used in development to reference the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationUpdateRequest.GameId">
            <summary>
            The ID of the Game which this achievement/skill should belong to. Can be left null to make the achievement/skill system-wide.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationUpdateRequest.Name">
            <summary>
            The display name for the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationUpdateRequest.Description">
            <summary>
            The description of the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationUpdateRequest.ActorType">
            <summary>
            The type of actor which this achievement/skill is intended to be completed by.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationUpdateRequest.EvaluationCriterias">
            <summary>
            A list of criteria which will be checked in order to see if an actor has completed the achievement/skill.
            Must contain at least one criteria.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.EvaluationUpdateRequest.Rewards">
            <summary>
            A list of rewards that will be provided to the actor upon completion of the achievement/skill criteria.
            An achievement does not need to contain a reward.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.GameRequest">
            <summary>
            Encapsulates game details.
            </summary>
            <example>
            JSON
            {
            Name : "Game Name"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.GameRequest.Name">
            <summary>
            The display name for the game.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.GameResponse">
            <summary>
            Encapsulates game details from the server.
            </summary>
            <example>
            JSON
            {
            Id : 1,
            Name : "Game Name"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.GameResponse.Id">
            <summary>
            The unqiue identifier for the game.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.GameResponse.Name">
            <summary>
            The display name of the game.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest">
            <summary>
            Encapsulates leaderboard details.
            </summary>
            <example>
            JSON
            {
            Token : "THE_LEADERBOARD_TOKEN",
            GameId : 1,
            Name : "Leaderboard Name",
            Key : "Key",
            ActorType : "User",
            SaveDataType : "Long",
            CriteriaScope : "Actor",
            LeaderboardType : "Highest"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest.Token">
            <summary>
            A unique identifier used in development to reference the leaderboard.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest.GameId">
            <summary>
            The Id of the Game which this leaderboards belongs to. Can be left null to relate this leaderboard to the system rather than a game.
            This Id is also used when gathering GameData using the Key provided.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest.Name">
            <summary>
            The display name of the leaderboard.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest.Key">
            <summary>
            The GameData key which is checked against in order to create the leaderboard standings.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest.ActorType">
            <summary>
            The type of actor which this leaderboard is intended for.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest.SaveDataType">
            <summary>
            The SaveDataType of the GameData being checked against.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest.CriteriaScope">
            <summary>
            Whether the criteria will be checked against the actor or relatedactors (i.e. group members, user friends).
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardRequest.LeaderboardType">
            <summary>
            The method which data will be collected and sorted for this leaderboard.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse">
            <summary>
            Encapsulates leaderboard details returned from the server.
            </summary>
            <example>
            JSON
            {
            Token : "THE_LEADERBOARD_TOKEN",
            GameId : 1,
            Name : "Leaderboard Name",
            Key : "Key",
            ActorType : "User",
            SaveDataType : "Long",
            CriteriaScope : "Actor",
            LeaderboardType : "Highest"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse.Token">
            <summary>
            The unique identifier used in development to reference the leaderboard.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse.GameId">
            <summary>
            The Id of the game which this leaderboard belongs to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse.Name">
            <summary>
            The display name of the leaderboard.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse.Key">
            <summary>
            The GameData key which is checked against in order to create the leaderboard standings.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse.ActorType">
            <summary>
            The type of actor which this leaderboard is intended for.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse.SaveDataType">
            <summary>
            The SaveDataType of the GameData being checked against.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse.CriteriaScope">
            <summary>
            Whether the criteria is checked against the actor or relatedactors (i.e. group members, user friends).
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardResponse.LeaderboardType">
            <summary>
            The method which collects data and sorts it for this leaderboard.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest">
            <summary>
            Encapsulates leaderboard current standings request.
            </summary>
            <example>
            JSON
            {
            LeaderboardToken : "AN_ACHIEVEMENT_TOKEN",
            GameId : 1,
            ActorId : 1,
            LeaderboardFilterType : "Near",
            Limit : 10,
            Offset : 0,
            DateStart : "2016-01-01 00:00:00",
            DateEnd : "2016-12-31 23:59:59"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest.LeaderboardToken">
            <summary>
            The Token of the Leaderboard which the standings are being gathered for.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest.GameId">
            <summary>
            The Id of the Game the leaderboard. Can be left null for system-wide leaderboards.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest.ActorId">
            <summary>
            The Id of an Actor. Required for getting standings for Near, Friends (user only) and Group Members (group only)
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest.LeaderboardFilterType">
            <summary>
            The filter for what standings will be returned.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest.PageLimit">
            <summary>
            The maximum number of results which will be returned.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest.PageOffset">
            <summary>
            The set of results which will be returned based on the limit.
            0 returns the first set of results for Top, Friends and Group Member and the nearest range for Near.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest.DateStart">
            <summary>
            The earliest point which data should be collected from.
            Can be left null to set no earliest point.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsRequest.DateEnd">
            <summary>
            The latest point which data should be collected from.
            Can be left null to gather all data up to the present time.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsResponse">
            <summary>
            Encapsulates leaderboard standings details from the database.
            </summary>
            <example>
            JSON
            {
            ActorId : 1,
            ActorName : "Name",
            Value : "10",
            Ranking : 1
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsResponse.ActorId">
            <summary>
            The Id of the Actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsResponse.ActorName">
            <summary>
            The name of the Actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsResponse.Value">
            <summary>
            The value returned from the query for the leaderboard.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.LeaderboardStandingsResponse.Ranking">
            <summary>
            The actor's global ranking within that leaderboard.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.RelationshipRequest">
            <summary>
            Encapsulates relationship details.
            </summary>
            <example>
            JSON
            {
            RequestorId : 1,
            AcceptorId : 2,
            AutoAccept : true
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RelationshipRequest.RequestorId">
            <summary>
            The Id of the requesting actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RelationshipRequest.AcceptorId">
            <summary>
            The Id of the receiving actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RelationshipRequest.AutoAccept">
            <summary>
            Whether the request should be automatically accepted.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.RelationshipResponse">
            <summary>
            Encapsulates relationship details from the server.
            </summary>
            <example>
            JSON
            {
            RequestorId : 1,
            AcceptorId : 2
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RelationshipResponse.RequestorId">
            <summary>
            The Id of the requesting actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RelationshipResponse.AcceptorId">
            <summary>
            The Id of the receiving actor.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate">
            <summary>
            Encapsulates relationship details, including updated status of the relationship.
            </summary>
            <example>
            JSON
            {
            RequestorId : 1,
            AcceptorId : 2,
            Accepted : true
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate.RequestorId">
            <summary>
            The Id of the requesting actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate.AcceptorId">
            <summary>
            The Id of the receiving actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RelationshipStatusUpdate.Accepted">
            <summary>
            Whether the request was accepted or declined.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.ResourceAddRequest">
            <summary>
            Encapsulates Resource Data details.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceAddRequest.ActorId">
            <summary>
            The id of the Actor which this Resource is being ensigned to. Can be left null to ensign to the system/game.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceAddRequest.GameId">
            <summary>
            The id of the Game which this Resource relates to. Can be left null to relate the Resource to the wider system.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceAddRequest.Key">
            <summary>
            The identifier/name of the Resource.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceAddRequest.Quantity">
            <summary>
            The value of the Resource.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.ResourceResponse">
            <summary>
            Encapsulates resource details from the server.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceResponse.Id">
            <summary>
            The id of the Resource.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceResponse.ActorId">
            <summary>
            The id of the Actor which this Resource relates to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceResponse.GameId">
            <summary>
            The id of the Game which this Resource relates to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceResponse.Key">
            <summary>
            The identifier/name of the Resource.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceResponse.Quantity">
            <summary>
            The amount of the Resource belonging to the actor/game.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.ResourceTransferRequest">
            <summary>
            Encapsulates Resource Transfer details.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceTransferRequest.SenderActorId">
            <summary>
            The Id of the Actor who will send this Resource. Can be left null to only give/take from the current owner.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceTransferRequest.RecipientActorId">
            <summary>
            The Id of the Actor who will receive this Resource. Can be left null to only give/take from the current owner.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceTransferRequest.GameId">
            <summary>
            The Id of the Game which this Resource belongs to. Left null for system-wise resources.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceTransferRequest.Quantity">
            <summary>
            The amount of the Resource being transferred.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceTransferRequest.Key">
            <summary>
            The key of the Resource being transferred.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.ResourceTransferResponse">
            <summary>
            Encapsulates Resource Transfer details from the server.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceTransferResponse.FromResource">
            <summary>
            The new details of the Resource being transferred from.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.ResourceTransferResponse.ToResource">
            <summary>
            The new details of the Resource being transferred to.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.RewardCreateRequest">
            <summary>
            Encapsulates the reward given for completing an achievement or skill.
            </summary>
            <example>
            JSON
            {
            Key : "Reward Key",
            DataType : "Float",
            Value : "10.5"
            }
            </example>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.RewardResponse">
            <summary>
            Encapsulates the reward given for completing an achievement or skill.
            </summary>
            <example>
            JSON
            {
            Key : "Reward Key",
            DataType : "Float",
            Value : "10.5"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RewardResponse.Id">
            <summary>
            The unqiue identifier for this type.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.RewardUpdateRequest">
            <summary>
            Encapsulates the reward given for completing an achievement or skill.
            </summary>
            <example>
            JSON
            {
            Key : "Reward Key",
            DataType : "Float",
            Value : "10.5"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RewardUpdateRequest.Id">
            <summary>
            The unqiue identifier for this type.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.RoleClaimRequest">
            <summary>
            Encapsulates roleclaim details.
            </summary>
            <example>
            JSON
            {
            RoleId : 1,
            ClaimId : 1
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RoleClaimRequest.RoleId">
            <summary>
            The ID of the role related to this roleclaim.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RoleClaimRequest.ClaimId">
            <summary>
            The ID of the claim related to this roleclaim.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.RoleClaimResponse">
            <summary>
            Encapsulates roleclaim details from the server.
            </summary>
            <example>
            JSON
            {
            RoleId : 1,
            ClaimId : 1
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RoleClaimResponse.RoleId">
            <summary>
            The ID of the role related to this roleclaim.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RoleClaimResponse.ClaimId">
            <summary>
            The ID of the claim related to this roleclaim.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.RoleRequest">
            <summary>
            Encapsulates role details.
            </summary>
            <example>
            JSON
            {
            Name : "Role Name"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RoleRequest.Name">
            <summary>
            The display name for the role.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RoleRequest.ClaimScope">
            <summary>
            The ClaimScope of this role.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.RoleResponse">
            <summary>
            Encapsulates role details from the server.
            </summary>
            <example>
            JSON
            {
            Id : 1,
            Name : "Role Name"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RoleResponse.Id">
            <summary>
            The unqiue identifier for the role.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RoleResponse.Name">
            <summary>
            The display name of the role.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.RoleResponse.ClaimScope">
            <summary>
            The ClaimScope of this role.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.SaveDataRequest">
            <summary>
            Encapsulates ActorData/GameData details.
            </summary>
            <example>
            JSON
            {
            ActorId : 1,
            GameId : 1,
            Key : "Data Key",
            Value : "10",
            SaveDataType : "Long"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.SaveDataRequest.ActorId">
            <summary>
            The id of the Actor which this ActorData/GameData is being ensigned to. Can be left null to ensign to the system/game.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.SaveDataRequest.GameId">
            <summary>
            The id of the Game which this ActorData/GameData relates to. Can be left null to relate the ActorData/GameData to the wider system.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.SaveDataRequest.Key">
            <summary>
            The identifier of the data being stored.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.SaveDataRequest.Value">
            <summary>
            The value of the data being stored.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.SaveDataRequest.SaveDataType">
            <summary>
            The type of data which is being stored.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Shared.SaveDataResponse">
            <summary>
            Encapsulates ActorData/GameData details from the server.
            </summary>
            <example>
            JSON
            {
            ActorId : 1,
            GameId : 1,
            Key : "Data Key",
            Value : "10",
            SaveDataType : "Long"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.SaveDataResponse.ActorId">
            <summary>
            The id of the Actor which this ActorData/GameData relates to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.SaveDataResponse.GameId">
            <summary>
            The id of the Game which this ActorData/GameData relates to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.SaveDataResponse.Key">
            <summary>
            The identifier of the data.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.SaveDataResponse.Value">
            <summary>
            The value of the data.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Shared.SaveDataResponse.SaveDataType">
            <summary>
            The type of the value for this data.
            </summary>
        </member>
    </members>
</doc>
